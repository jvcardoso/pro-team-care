import React, { useState } from 'react';
import { notify } from '../utils/notifications.jsx';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import { CheckCircle, XCircle, AlertCircle, Info, Trash2, HelpCircle, Bell, Zap, Heart, Star, Gift, Coffee } from 'lucide-react';

const NotificationDemo = () => {
  const [counter, setCounter] = useState(0);

  const testSuccess = () => {
    notify.success('Opera√ß√£o realizada com sucesso!');
  };

  const testError = () => {
    notify.error('Ops! Algo deu errado. Tente novamente.');
  };

  const testInfo = () => {
    notify.info('Esta √© uma informa√ß√£o importante para voc√™.');
  };

  const testWarning = () => {
    notify.warning('Aten√ß√£o! Verifique os dados antes de continuar.');
  };

  const testConfirm = () => {
    notify.confirm(
      'Confirmar A√ß√£o',
      'Deseja realmente executar esta opera√ß√£o?',
      () => {
        notify.success('A√ß√£o confirmada e executada!');
      },
      () => {
        notify.info('A√ß√£o cancelada pelo usu√°rio.');
      }
    );
  };

  const testConfirmDelete = () => {
    notify.confirmDelete(
      'Excluir Item',
      'Tem certeza que deseja excluir este item permanentemente?',
      () => {
        notify.success('Item exclu√≠do com sucesso!');
      },
      () => {
        notify.info('Exclus√£o cancelada.');
      }
    );
  };

  const testLongMessage = () => {
    notify.success('Esta √© uma mensagem muito longa para testar como o toast se comporta quando h√° bastante texto para ser exibido. O layout deve se ajustar automaticamente.');
  };

  const testSequence = () => {
    notify.info('Iniciando sequ√™ncia de testes...');
    
    setTimeout(() => {
      notify.warning('Processando dados...');
    }, 1000);
    
    setTimeout(() => {
      notify.success('Sequ√™ncia de testes conclu√≠da!');
    }, 2000);
  };

  const testCounter = () => {
    const newCounter = counter + 1;
    setCounter(newCounter);
    notify.success(`Contador atualizado: ${newCounter}`);
  };

  const testCustomDuration = () => {
    notify.info('Esta mensagem ficar√° vis√≠vel por 10 segundos', { duration: 10000 });
  };

  const testErrorScenarios = () => {
    const scenarios = [
      'Erro de conex√£o com o servidor',
      'Dados inv√°lidos fornecidos',
      'Permiss√£o negada para esta opera√ß√£o',
      'Tempo limite de requisi√ß√£o excedido',
      'Usu√°rio n√£o autenticado'
    ];
    
    const randomScenario = scenarios[Math.floor(Math.random() * scenarios.length)];
    notify.error(randomScenario);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-foreground flex items-center gap-2">
            <Bell className="h-6 w-6 text-primary" />
            Demonstra√ß√£o de Notifica√ß√µes
          </h1>
          <p className="text-muted-foreground">
            Teste todos os tipos de notifica√ß√µes do sistema
          </p>
        </div>
      </div>

      {/* Bot√µes B√°sicos */}
      <Card title="üéØ Tipos B√°sicos de Notifica√ß√£o">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <Button 
            onClick={testSuccess} 
            variant="primary"
            icon={<CheckCircle className="h-4 w-4" />}
            className="bg-green-600 hover:bg-green-700"
          >
            Sucesso
          </Button>
          
          <Button 
            onClick={testError}
            variant="danger"
            icon={<XCircle className="h-4 w-4" />}
          >
            Erro
          </Button>
          
          <Button 
            onClick={testInfo}
            variant="primary"
            icon={<Info className="h-4 w-4" />}
            className="bg-blue-600 hover:bg-blue-700"
          >
            Informa√ß√£o
          </Button>
          
          <Button 
            onClick={testWarning}
            variant="primary"
            icon={<AlertCircle className="h-4 w-4" />}
            className="bg-yellow-600 hover:bg-yellow-700"
          >
            Aviso
          </Button>
        </div>
      </Card>

      {/* Confirma√ß√µes */}
      <Card title="‚ùì Modais de Confirma√ß√£o">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <Button 
            onClick={testConfirm}
            variant="primary"
            icon={<HelpCircle className="h-4 w-4" />}
            className="bg-amber-600 hover:bg-amber-700"
          >
            Confirma√ß√£o Simples
          </Button>
          
          <Button 
            onClick={testConfirmDelete}
            variant="danger"
            icon={<Trash2 className="h-4 w-4" />}
          >
            Confirma√ß√£o de Exclus√£o
          </Button>
        </div>
      </Card>

      {/* Testes Avan√ßados */}
      <Card title="‚ö° Testes Avan√ßados">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          <Button 
            onClick={testLongMessage}
            variant="secondary"
            icon={<Zap className="h-4 w-4" />}
          >
            Mensagem Longa
          </Button>
          
          <Button 
            onClick={testSequence}
            variant="secondary"
            icon={<Star className="h-4 w-4" />}
          >
            Sequ√™ncia de Toasts
          </Button>
          
          <Button 
            onClick={testCounter}
            variant="secondary"
            icon={<Heart className="h-4 w-4" />}
          >
            Contador ({counter})
          </Button>
          
          <Button 
            onClick={testCustomDuration}
            variant="secondary"
            icon={<Coffee className="h-4 w-4" />}
          >
            Dura√ß√£o Personalizada
          </Button>
          
          <Button 
            onClick={testErrorScenarios}
            variant="secondary"
            icon={<Gift className="h-4 w-4" />}
          >
            Cen√°rios Aleat√≥rios
          </Button>
        </div>
      </Card>

      {/* Exemplos de Uso Real */}
      <Card title="üíº Exemplos de Uso Real">
        <div className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            <Button 
              onClick={() => {
                notify.success('Login realizado com sucesso!');
              }}
              variant="primary"
              className="bg-green-600 hover:bg-green-700"
            >
              ‚úÖ Login Bem-sucedido
            </Button>
            
            <Button 
              onClick={() => {
                notify.error('Falha na autentica√ß√£o. Verifique suas credenciais.');
              }}
              variant="danger"
            >
              ‚ùå Erro de Login
            </Button>
            
            <Button 
              onClick={() => {
                notify.info('Dados da empresa preenchidos automaticamente!');
              }}
              variant="primary"
              className="bg-blue-600 hover:bg-blue-700"
            >
              ‚ÑπÔ∏è CNPJ Consultado
            </Button>
            
            <Button 
              onClick={() => {
                notify.warning('Preencha todos os campos obrigat√≥rios.');
              }}
              variant="primary"
              className="bg-yellow-600 hover:bg-yellow-700"
            >
              ‚ö†Ô∏è Valida√ß√£o de Form
            </Button>
            
            <Button 
              onClick={() => {
                notify.confirmDelete(
                  'Excluir Empresa',
                  'Tem certeza que deseja excluir a empresa "Exemplo LTDA"?',
                  () => notify.success('Empresa exclu√≠da com sucesso!'),
                  () => notify.info('Exclus√£o cancelada.')
                );
              }}
              variant="danger"
            >
              üóëÔ∏è Excluir Empresa
            </Button>
            
            <Button 
              onClick={() => {
                notify.confirm(
                  'Salvar Altera√ß√µes',
                  'Deseja salvar as altera√ß√µes feitas no formul√°rio?',
                  () => notify.success('Altera√ß√µes salvas com sucesso!'),
                  () => notify.warning('Altera√ß√µes descartadas.')
                );
              }}
              variant="primary"
              className="bg-amber-600 hover:bg-amber-700"
            >
              üíæ Salvar Form
            </Button>
          </div>
        </div>
      </Card>

      {/* Instru√ß√µes */}
      <Card title="üìã Como Usar" className="bg-blue-50 dark:bg-blue-900/20">
        <div className="space-y-4 text-sm">
          <div>
            <h4 className="font-medium text-foreground mb-2">Importa√ß√£o:</h4>
            <code className="bg-gray-100 dark:bg-gray-800 p-2 rounded block text-xs">
              import {`{ notify }`} from '../utils/notifications.jsx';
            </code>
          </div>
          
          <div>
            <h4 className="font-medium text-foreground mb-2">Uso B√°sico:</h4>
            <div className="space-y-1 font-mono text-xs bg-gray-100 dark:bg-gray-800 p-3 rounded">
              <div>notify.success('Mensagem de sucesso');</div>
              <div>notify.error('Mensagem de erro');</div>
              <div>notify.info('Mensagem informativa');</div>
              <div>notify.warning('Mensagem de aviso');</div>
            </div>
          </div>
          
          <div>
            <h4 className="font-medium text-foreground mb-2">Confirma√ß√µes:</h4>
            <div className="space-y-1 font-mono text-xs bg-gray-100 dark:bg-gray-800 p-3 rounded">
              <div>notify.confirm('T√≠tulo', 'Mensagem', onConfirm, onCancel);</div>
              <div>notify.confirmDelete('T√≠tulo', 'Mensagem', onDelete);</div>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default NotificationDemo;