/**
 * Servi√ßo para gerenciar sess√µes seguras e personifica√ß√£o
 */
import { api } from "./api";

class SecureSessionService {
  constructor() {
    this.baseUrl = "/api/v1/secure-sessions";
    this.currentContext = null;
    this.availableProfiles = [];
    this.listeners = [];
  }

  // Event listener system for context changes
  addListener(callback) {
    this.listeners.push(callback);
  }

  removeListener(callback) {
    this.listeners = this.listeners.filter((l) => l !== callback);
  }

  notifyListeners() {
    this.listeners.forEach((callback) => callback(this.currentContext));
  }

  /**
   * Obter perfis dispon√≠veis para troca
   */
  async getAvailableProfiles() {
    try {
      const response = await api.get(`${this.baseUrl}/available-profiles`);
      this.availableProfiles = response.data.profiles || [];
      return response.data;
    } catch (error) {
      // Tratamento gracioso para erros de autentica√ß√£o
      if (error.response?.status === 401) {
        console.info(
          "Usu√°rio n√£o autenticado para perfis - usando perfil padr√£o"
        );
        this.availableProfiles = [];
        return { profiles: [], total_profiles: 0, user_is_root: false };
      }

      // Endpoint n√£o implementado - falhar
      if (error.response?.status === 404) {
        throw new Error("Endpoint de perfis n√£o implementado no backend");
      }

      console.error("Erro ao obter perfis dispon√≠veis:", error);
      throw error;
    }
  }

  /**
   * Trocar perfil/contexto
   */
  async switchProfile(switchData) {
    try {
      const response = await api.post(
        `${this.baseUrl}/switch-profile`,
        switchData
      );

      if (response.data.success) {
        // Atualizar contexto atual
        await this.getCurrentContext();
        this.notifyListeners();
      }

      return response.data;
    } catch (error) {
      console.error("Erro ao trocar perfil:", error);
      throw error;
    }
  }

  /**
   * Personificar um usu√°rio (ROOT apenas)
   */
  async impersonateUser(userId, reason) {
    try {
      const response = await this.switchProfile({
        impersonated_user_id: userId,
        reason: reason || "Personifica√ß√£o administrativa",
      });
      return response;
    } catch (error) {
      console.error("Erro ao personificar usu√°rio:", error);
      throw error;
    }
  }

  /**
   * Trocar contexto (empresa/estabelecimento)
   */
  async switchContext(contextType, contextId, reason) {
    try {
      const response = await this.switchProfile({
        context_type: contextType,
        context_id: contextId,
        reason: reason || "Troca de contexto",
      });
      return response;
    } catch (error) {
      console.error("Erro ao trocar contexto:", error);
      throw error;
    }
  }

  /**
   * Obter contexto atual da sess√£o
   */
  async getCurrentContext() {
    try {
      const response = await api.get(`${this.baseUrl}/current-context`);

      // Verificar se a sess√£o √© v√°lida na resposta
      if (response.data && response.data.session_valid === false) {
        console.info("Sess√£o segura n√£o ativa - funcionando em modo padr√£o");
        this.currentContext = null;
        return null;
      }

      this.currentContext = response.data;
      return response.data;
    } catch (error) {
      // Se der erro 401, usu√°rio n√£o tem sess√£o segura ativa
      if (error.response?.status === 401) {
        console.info("Sess√£o segura n√£o ativa - funcionando em modo padr√£o");
        this.currentContext = null;
        return null;
      }

      // Endpoint n√£o implementado - falhar
      if (error.response?.status === 404) {
        throw new Error("Endpoint de contexto n√£o implementado no backend");
      }

      console.error("Erro ao obter contexto atual:", error);
      throw error;
    }
  }

  /**
   * Terminar sess√£o segura
   */
  async terminateSession() {
    try {
      const response = await api.post(`${this.baseUrl}/terminate`);
      this.currentContext = null;
      this.notifyListeners();
      return response.data;
    } catch (error) {
      console.error("Erro ao terminar sess√£o:", error);
      throw error;
    }
  }

  /**
   * Listar sess√µes ativas (ROOT apenas)
   */
  async getActiveSessions() {
    try {
      const response = await api.get(`${this.baseUrl}/active-sessions`);
      return response.data;
    } catch (error) {
      console.error("Erro ao listar sess√µes ativas:", error);
      throw error;
    }
  }

  /**
   * Verificar se usu√°rio est√° personificando
   */
  isImpersonating() {
    return this.currentContext?.is_impersonating || false;
  }

  /**
   * Verificar se usu√°rio √© ROOT
   */
  isRoot() {
    return this.currentContext?.is_root || false;
  }

  /**
   * Obter usu√°rio efetivo (personificado ou real)
   */
  getEffectiveUser() {
    if (!this.currentContext) return null;

    return {
      id: this.currentContext.effective_user_id,
      email: this.currentContext.effective_user_email,
      isImpersonating: this.currentContext.is_impersonating,
    };
  }

  /**
   * Obter usu√°rio real (quem est√° logado)
   */
  getRealUser() {
    if (!this.currentContext) return null;

    return {
      id: this.currentContext.user_id,
      email: this.currentContext.user_email,
    };
  }

  /**
   * Obter contexto ativo
   */
  getActiveContext() {
    if (!this.currentContext) return null;

    return {
      type: this.currentContext.active_context?.type,
      id: this.currentContext.active_context?.id,
      role: {
        id: this.currentContext.active_role?.id,
        name: this.currentContext.active_role?.name,
        displayName: this.currentContext.active_role?.display_name,
      },
    };
  }

  /**
   * Inicializar servi√ßo (carregar contexto se existir)
   */
  async initialize() {
    try {
      console.info("üîê Inicializando servi√ßo de sess√£o segura...");
      await this.getCurrentContext();

      if (this.currentContext) {
        console.info("‚úÖ Contexto de sess√£o encontrado, carregando perfis...");
        await this.getAvailableProfiles();
      } else {
        console.info(
          "‚ÑπÔ∏è Nenhum contexto de sess√£o ativa - sistema funcionando em modo padr√£o"
        );
      }

      console.info("‚úÖ Servi√ßo de sess√£o segura inicializado com sucesso");
    } catch (error) {
      // Tratamento gracioso - n√£o falhar a aplica√ß√£o inteira
      console.warn(
        "‚ö†Ô∏è Erro na inicializa√ß√£o do servi√ßo de sess√£o segura:",
        error.message
      );
      console.info("üîÑ Continuando sem funcionalidades de sess√£o segura");

      // Garantir estado consistente
      this.currentContext = null;
      this.availableProfiles = [];
    }
  }
}

// Inst√¢ncia singleton
const secureSessionService = new SecureSessionService();

export default secureSessionService;
