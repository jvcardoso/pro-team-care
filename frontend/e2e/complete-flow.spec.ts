import { test, expect } from '@playwright/test';
import { AdminPage } from './pages/AdminPage';

test.describe('Fluxo Completo E2E', () => {
  test('fluxo completo: login ‚Üí menus din√¢micos ‚Üí navega√ß√£o ‚Üí altera√ß√£o de usu√°rio', async ({ page, context }) => {
    // Limpar qualquer estado anterior
    await context.clearCookies();
    await context.clearPermissions();
    
    // 1. FASE: Verifica√ß√£o de conectividade
    console.log('üîç Verificando conectividade...');
    
    // Verificar se backend est√° acess√≠vel
    const healthResponse = await page.request.get('http://192.168.11.83:8000/api/v1/health');
    expect(healthResponse.status()).toBe(200);
    
    // Verificar se frontend est√° acess√≠vel
    await page.goto('/');
    await expect(page).toHaveTitle(/Pro Team Care/);
    
    console.log('‚úÖ Conectividade OK');
    
    // 2. FASE: Simula√ß√£o de Login
    console.log('üîê Simulando processo de login...');
    
    // Configurar estado de autentica√ß√£o
    await page.addInitScript(() => {
      // Simular token JWT v√°lido
      const mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6OTk5OTk5OTk5OX0.mock-signature';
      
      localStorage.setItem('access_token', mockToken);
      localStorage.setItem('user', JSON.stringify({
        id: 1,
        email: 'admin@teste.com',
        name: 'Admin Teste',
        is_system_admin: false,
        person_type: 'PF'
      }));
      localStorage.setItem('useDynamicMenus', 'true');
      localStorage.setItem('testAsRoot', 'false');
    });
    
    console.log('‚úÖ Autentica√ß√£o configurada');
    
    // 3. FASE: Navega√ß√£o para √°rea administrativa
    console.log('üè† Navegando para √°rea administrativa...');
    
    const adminPage = new AdminPage(page);
    await adminPage.goto();
    
    // Verificar se chegamos na √°rea correta
    await expect(page).toHaveURL(/.*\/admin\/dashboard/);
    console.log('‚úÖ √Årea administrativa acessada');
    
    // 4. FASE: Valida√ß√£o de menus din√¢micos - Usu√°rio Normal
    console.log('üìã Testando menus din√¢micos para usu√°rio normal...');
    
    await adminPage.waitForMenusToLoad();
    
    // Verificar controles de desenvolvimento
    const isDevMode = await adminPage.isDevelopmentModeVisible();
    expect(isDevMode).toBeTruthy();
    
    // Verificar usu√°rio inicial
    const userType = await adminPage.getCurrentUserType();
    expect(userType).toBe('normal');
    
    // Verificar modo de menu
    const menuType = await adminPage.getCurrentMenuType();
    expect(menuType).toBe('dynamic');
    
    // Validar estrutura de menus para usu√°rio normal
    const normalMenus = await adminPage.validateMenuStructure();
    expect(normalMenus.menuCount).toBeGreaterThan(0);
    expect(normalMenus.menuCount).toBeLessThanOrEqual(8); // Usu√°rio normal tem menos menus
    
    console.log(`‚úÖ Usu√°rio normal: ${normalMenus.menuCount} menus carregados`);
    
    // 5. FASE: Navega√ß√£o e intera√ß√£o com menus
    console.log('üß≠ Testando navega√ß√£o nos menus...');
    
    // Expandir menu Dashboard
    await adminPage.expandMenu('Dashboard');
    const dashboardSubmenus = await adminPage.getSubMenuCount('Dashboard');
    expect(dashboardSubmenus).toBeGreaterThan(0);
    
    // Navegar para Dashboard v2
    await adminPage.clickMenu('Dashboard v2');
    await expect(page).toHaveURL(/.*\/admin\/dashboard-v2/);
    
    console.log('‚úÖ Navega√ß√£o funcionando');
    
    // 6. FASE: Altern√¢ncia para usu√°rio ROOT
    console.log('üëë Alternando para usu√°rio ROOT...');
    
    // Voltar para √°rea principal
    await adminPage.goto();
    
    // Alternar para ROOT
    await adminPage.toggleUserType();
    
    // Aguardar recarregamento
    await adminPage.waitForMenusToLoad();
    
    // Verificar mudan√ßa para ROOT
    const rootUserType = await adminPage.getCurrentUserType();
    expect(rootUserType).toBe('root');
    
    // Validar menus do ROOT (deve ter mais menus)
    const rootMenus = await adminPage.validateMenuStructure();
    expect(rootMenus.menuCount).toBeGreaterThan(normalMenus.menuCount);
    
    // Verificar menus espec√≠ficos do ROOT
    expect(rootMenus.menuNames).toContain('Administra√ß√£o');
    
    console.log(`‚úÖ ROOT: ${rootMenus.menuCount} menus carregados (${rootMenus.menuCount - normalMenus.menuCount} a mais)`);
    
    // 7. FASE: Teste de altern√¢ncia de modo de menu
    console.log('üîß Testando altern√¢ncia de modos de menu...');
    
    // Alternar para menus est√°ticos
    const staticMode = await adminPage.toggleMenuType();
    expect(staticMode).toBe('static');
    
    // Validar menus est√°ticos
    await adminPage.waitForMenusToLoad();
    const staticMenus = await adminPage.validateMenuStructure();
    expect(staticMenus.menuCount).toBeGreaterThan(0);
    
    // Voltar para din√¢micos
    const dynamicMode = await adminPage.toggleMenuType();
    expect(dynamicMode).toBe('dynamic');
    
    console.log('‚úÖ Altern√¢ncia de modos funcionando');
    
    // 8. FASE: Teste de responsividade
    console.log('üì± Testando responsividade...');
    
    // Desktop
    await page.setViewportSize({ width: 1280, height: 720 });
    await adminPage.waitForMenusToLoad();
    let responsiveMenus = await adminPage.validateMenuStructure();
    expect(responsiveMenus.menuCount).toBeGreaterThan(0);
    
    // Tablet
    await page.setViewportSize({ width: 768, height: 1024 });
    await adminPage.waitForMenusToLoad();
    responsiveMenus = await adminPage.validateMenuStructure();
    expect(responsiveMenus.menuCount).toBeGreaterThan(0);
    
    // Mobile
    await page.setViewportSize({ width: 375, height: 667 });
    await adminPage.waitForMenusToLoad();
    responsiveMenus = await adminPage.validateMenuStructure();
    expect(responsiveMenus.menuCount).toBeGreaterThan(0);
    
    console.log('‚úÖ Responsividade validada');
    
    // 9. FASE: Teste de performance
    console.log('‚ö° Verificando performance...');
    
    // Voltar para desktop
    await page.setViewportSize({ width: 1280, height: 720 });
    
    // Medir tempo de carregamento dos menus
    const startTime = Date.now();
    await adminPage.goto();
    await adminPage.waitForMenusToLoad();
    const loadTime = Date.now() - startTime;
    
    expect(loadTime).toBeLessThan(5000); // Menus devem carregar em menos de 5s
    console.log(`‚úÖ Menus carregaram em ${loadTime}ms`);
    
    // 10. FASE: Valida√ß√£o final
    console.log('üéØ Valida√ß√£o final do sistema...');
    
    // Verificar que n√£o h√° erros na p√°gina
    const hasErrors = await adminPage.hasErrorMessage();
    expect(hasErrors).toBeFalsy();
    
    // Verificar que sidebar est√° vis√≠vel e funcional
    const sidebarVisible = await adminPage.sidebar.isVisible();
    expect(sidebarVisible).toBeTruthy();
    
    // Teste final: navegar por diferentes se√ß√µes
    const testNavigations = [
      { menu: 'Dashboard v1', expectedUrl: /.*\/admin\/dashboard/ },
      { menu: 'Charts', expectedUrl: /.*\/admin\/charts/ },
      { menu: 'Widgets', expectedUrl: /.*\/admin\/widgets/ }
    ];
    
    for (const nav of testNavigations) {
      await adminPage.clickMenu(nav.menu);
      await expect(page).toHaveURL(nav.expectedUrl);
      
      // Verificar que menus permanecem carregados ap√≥s navega√ß√£o
      const menuCount = await adminPage.getVisibleMenuCount();
      expect(menuCount).toBeGreaterThan(0);
    }
    
    console.log('üéâ FLUXO COMPLETO E2E FINALIZADO COM SUCESSO!');
    
    // Relat√≥rio final
    const finalReport = {
      normalUserMenus: normalMenus.menuCount,
      rootUserMenus: rootMenus.menuCount,
      loadTime: `${loadTime}ms`,
      responsiveTested: '‚úÖ',
      navigationTested: '‚úÖ',
      performanceOK: loadTime < 5000 ? '‚úÖ' : '‚ùå'
    };
    
    console.log('üìä RELAT√ìRIO FINAL:', JSON.stringify(finalReport, null, 2));
  });

  test('fluxo de recupera√ß√£o de erro', async ({ page }) => {
    console.log('üö® Testando fluxo de recupera√ß√£o de erros...');
    
    // Configurar intercepta√ß√£o para simular erro na API
    await page.route('**/api/v1/menus/**', route => {
      // Simular erro 500 na primeira chamada
      if (!route.request().url().includes('retry=true')) {
        route.fulfill({
          status: 500,
          contentType: 'application/json',
          body: JSON.stringify({ detail: 'Simulated server error' })
        });
      } else {
        route.continue();
      }
    });
    
    // Configurar autentica√ß√£o
    await page.addInitScript(() => {
      localStorage.setItem('access_token', 'mock-token');
      localStorage.setItem('user', JSON.stringify({ id: 1, name: 'Test' }));
      localStorage.setItem('useDynamicMenus', 'true');
    });
    
    const adminPage = new AdminPage(page);
    await adminPage.goto();
    
    // Deve usar fallback e ainda funcionar
    await adminPage.waitForMenusToLoad();
    const result = await adminPage.validateMenuStructure();
    
    expect(result.menuCount).toBeGreaterThan(0);
    console.log('‚úÖ Sistema se recuperou do erro graciosamente');
  });
});