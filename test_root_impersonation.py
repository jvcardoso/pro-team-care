#!/usr/bin/env python3
"""
Teste de personifica√ß√£o de usu√°rio por ROOT
"""
import requests
from pprint import pprint

BASE_URL = "http://localhost:8000/api/v1"

def test_root_impersonation():
    print("üëë TESTE: Personifica√ß√£o de Usu√°rio por ROOT")
    print("=" * 50)
    
    # 1. Login como ROOT
    print("\n1Ô∏è‚É£ Login como ROOT (admin@proteamcare.com)...")
    login_response = requests.post(f"{BASE_URL}/auth/login", data={
        "username": "admin@proteamcare.com",
        "password": "password"
    })
    
    if login_response.status_code != 200:
        print(f"‚ùå Erro no login: {login_response.status_code}")
        return
        
    token = login_response.json()["access_token"]
    headers = {"Authorization": f"Bearer {token}"}
    print("‚úÖ Login ROOT realizado com sucesso")
    
    # 2. Ver perfis dispon√≠veis (incluindo personifica√ß√£o)
    print("\n2Ô∏è‚É£ Verificando perfis dispon√≠veis para ROOT...")
    profiles_response = requests.get(f"{BASE_URL}/secure-sessions/available-profiles", headers=headers)
    
    if profiles_response.status_code == 200:
        data = profiles_response.json()
        print(f"‚úÖ ROOT pode ver {data['total_profiles']} perfis")
        print(f"üîë User is ROOT: {data['user_is_root']}")
        
        # Mostrar perfis de personifica√ß√£o
        impersonation_profiles = [p for p in data['profiles'] if p.get('is_impersonation')]
        if impersonation_profiles:
            print(f"\nüë• Perfis de personifica√ß√£o dispon√≠veis:")
            for profile in impersonation_profiles:
                print(f"  - Usu√°rio: {profile['target_user_email']} (ID: {profile['target_user_id']})")
                print(f"    Role: {profile['role_display_name']}")
                print(f"    Contexto: {profile['context_name']}")
        else:
            print("üìù Nenhum perfil de personifica√ß√£o encontrado (pode ser normal se n√£o h√° outros usu√°rios)")
    
    # 3. Tentar personificar um usu√°rio espec√≠fico (ID 2)
    print("\n3Ô∏è‚É£ Tentando personificar usu√°rio ID 2...")
    impersonate_response = requests.post(f"{BASE_URL}/secure-sessions/switch-profile", 
        headers=headers, 
        json={
            "impersonated_user_id": 2,
            "reason": "Investiga√ß√£o de problema reportado pelo usu√°rio"
        }
    )
    
    print(f"Status personifica√ß√£o: {impersonate_response.status_code}")
    if impersonate_response.status_code == 200:
        print("‚úÖ Personifica√ß√£o realizada com sucesso!")
        pprint(impersonate_response.json())
    else:
        print(f"‚ùå Erro na personifica√ß√£o: {impersonate_response.text}")
    
    # 4. Verificar contexto ap√≥s personifica√ß√£o
    print("\n4Ô∏è‚É£ Verificando contexto ap√≥s personifica√ß√£o...")
    context_response = requests.get(f"{BASE_URL}/secure-sessions/current-context", headers=headers)
    
    if context_response.status_code == 200:
        context = context_response.json()
        print("üìä Contexto atual:")
        print(f"  - Usu√°rio real: {context.get('user_email')}")
        print(f"  - Usu√°rio efetivo: {context.get('effective_user_email')}")
        print(f"  - Personificando: {context.get('is_impersonating')}")
        print(f"  - √â ROOT: {context.get('is_root')}")
    else:
        print(f"‚ùå Erro ao verificar contexto: {context_response.text}")

    # 5. Demonstrar recursos dispon√≠veis apenas para ROOT
    print("\n5Ô∏è‚É£ Recursos exclusivos para ROOT:")
    print("‚úÖ Pode personificar qualquer usu√°rio")
    print("‚úÖ Pode ver todos os perfis do sistema")
    print("‚úÖ Pode assumir qualquer contexto (empresa/estabelecimento)")
    print("‚úÖ Todas as opera√ß√µes s√£o auditadas")
    
    # 6. Listar sess√µes ativas (s√≥ ROOT)
    print("\n6Ô∏è‚É£ Listando sess√µes ativas (s√≥ ROOT pode fazer)...")
    sessions_response = requests.get(f"{BASE_URL}/secure-sessions/active-sessions", headers=headers)
    
    if sessions_response.status_code == 200:
        sessions = sessions_response.json()
        print(f"‚úÖ ROOT pode ver {sessions['total_sessions']} sess√µes ativas")
    else:
        print(f"‚ùå Erro: {sessions_response.text}")

if __name__ == "__main__":
    test_root_impersonation()