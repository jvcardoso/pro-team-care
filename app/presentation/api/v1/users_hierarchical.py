"""
API Endpoints para Gerenciamento Hier치rquico de Usu치rios
Implementa controle de acesso baseado em hierarquia de permiss칫es
"""

from typing import Any, Dict, Optional

from fastapi import APIRouter, Depends, HTTPException, Path, Query, status

from app.infrastructure.auth import get_current_user
from app.infrastructure.database import get_db
from app.infrastructure.repositories.hierarchical_user_repository import (
    HierarchicalUserRepository,
)
from app.infrastructure.repositories.user_repository_enhanced import (
    EnhancedUserRepository,
)

router = APIRouter(prefix="/hierarchical-users", tags=["Hierarchical Users"])


@router.get(
    "/hierarchical",
    summary="Listar usu치rios com controle hier치rquico",
    description="""
    Lista usu치rios baseado no n칤vel hier치rquico do usu치rio solicitante:

    **N칤veis de Acesso:**
    - 游댮 **ROOT**: Todos os usu치rios (dados mascarados)
    - 游댯 **Admin Empresa**: Usu치rios das empresas administradas
    - 游릭 **Admin Estabelecimento**: Usu치rios dos estabelecimentos
    - 游리 **Usu치rio Comum**: Pr칩prios dados + colegas

    **Filtros Dispon칤veis:**
    - `search`: Busca por nome ou email
    - `role_filter`: Filtrar por role espec칤fico
    - `company_filter`: Filtrar por empresa (apenas admins)
    - `establishment_filter`: Filtrar por estabelecimento
    - `hierarchy_filter`: Filtrar por n칤vel hier치rquico

    **Seguran칞a:**
    - Controle autom치tico de acesso baseado em hierarquia
    - Mascaramento de dados sens칤veis por n칤vel
    - Log de auditoria autom치tico
    """,
    responses={
        200: {
            "description": "Lista de usu치rios acess칤veis",
            "content": {
                "application/json": {
                    "example": {
                        "users": [
                            {
                                "user_id": 1,
                                "user_email": "admin@example.com",
                                "person_name": "Administrador",
                                "hierarchy_level": "ROOT",
                                "company_id": 1,
                                "establishment_code": "MATRIZ001",
                                "access_reason": "System Administrator - Full Access",
                            }
                        ],
                        "total": 1,
                        "page": 1,
                        "per_page": 50,
                        "requesting_user_hierarchy": "ROOT",
                    }
                }
            },
        },
        403: {"description": "Acesso negado - usu치rio sem permiss칫es suficientes"},
        404: {"description": "Usu치rio solicitante n칚o encontrado"},
    },
)
async def list_users_hierarchical(
    skip: int = Query(0, ge=0, description="N칰mero de registros para pular"),
    limit: int = Query(50, ge=1, le=100, description="Limite de registros por p치gina"),
    search: Optional[str] = Query(None, description="Buscar por nome ou email"),
    role_filter: Optional[str] = Query(None, description="Filtrar por role espec칤fico"),
    company_filter: Optional[int] = Query(
        None, description="Filtrar por ID da empresa"
    ),
    establishment_filter: Optional[int] = Query(
        None, description="Filtrar por ID do estabelecimento"
    ),
    hierarchy_filter: Optional[str] = Query(
        None, description="Filtrar por n칤vel hier치rquico"
    ),
    current_user=Depends(get_current_user),
    db=Depends(get_db),
) -> Dict[str, Any]:
    """Lista usu치rios com controle hier치rquico completo"""

    # Inicializar repository hier치rquico
    hierarchical_repo = HierarchicalUserRepository(db)

    try:
        # Obter usu치rios acess칤veis
        users, total = await hierarchical_repo.list_accessible_users(
            requesting_user_id=current_user.id,
            skip=skip,
            limit=limit,
            search=search,
            role_filter=role_filter,
            company_filter=company_filter,
            establishment_filter=establishment_filter,
            hierarchy_filter=hierarchy_filter,
        )

        # Obter informa칞칫es hier치rquicas do usu치rio solicitante
        requester_hierarchy = await hierarchical_repo.get_user_hierarchy_info(
            current_user.id
        )

        return {
            "users": users,
            "total": total,
            "page": (skip // limit) + 1,
            "per_page": limit,
            "requesting_user_hierarchy": (
                requester_hierarchy.get("hierarchy_level")
                if requester_hierarchy
                else "UNKNOWN"
            ),
            "requesting_user_contexts": {
                "companies": (
                    requester_hierarchy.get("accessible_companies", [])
                    if requester_hierarchy
                    else []
                ),
                "establishments": (
                    requester_hierarchy.get("accessible_establishments", [])
                    if requester_hierarchy
                    else []
                ),
            },
        }

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro interno do servidor: {str(e)}",
        )


@router.get(
    "/{user_id}/hierarchical",
    summary="Obter usu치rio espec칤fico com controle hier치rquico",
    description="""
    Busca dados detalhados de um usu치rio espec칤fico baseado na hierarquia:

    **N칤veis de Retorno:**
    - 游댮 **ROOT**: Dados completos com mascaramento de seguran칞a
    - 游댯 **Admin Empresa**: Dados empresariais (se usu치rio da mesma empresa)
    - 游릭 **Admin Estabelecimento**: Dados b치sicos (se usu치rio do mesmo estabelecimento)
    - 游리 **Usu치rio Comum**: Pr칩prios dados completos ou dados b치sicos de colegas

    **Campos Retornados por N칤vel:**
    - ROOT: Todos + status 2FA + dados LGPD
    - Admin Empresa: Dados empresariais + hist칩rico
    - Admin Estabelecimento: Dados b치sicos + role
    - Usu치rio: Dados pessoais ou b치sicos de colegas
    """,
    responses={
        200: {"description": "Dados do usu치rio (conforme n칤vel de acesso)"},
        403: {"description": "Acesso negado ao usu치rio solicitado"},
        404: {"description": "Usu치rio n칚o encontrado ou sem acesso"},
    },
)
async def get_user_hierarchical(
    user_id: int = Path(..., description="ID do usu치rio a ser consultado"),
    current_user=Depends(get_current_user),
    db=Depends(get_db),
) -> Dict[str, Any]:
    """Busca usu치rio espec칤fico com controle hier치rquico"""

    # Inicializar repository hier치rquico
    hierarchical_repo = HierarchicalUserRepository(db)

    try:
        # Buscar usu치rio com controle hier치rquico
        user_data = await hierarchical_repo.get_user_with_hierarchical_control(
            requesting_user_id=current_user.id, target_user_id=user_id
        )

        if not user_data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Usu치rio n칚o encontrado ou acesso negado",
            )

        # Obter informa칞칫es de contexto
        requester_hierarchy = await hierarchical_repo.get_user_hierarchy_info(
            current_user.id
        )

        # Adicionar metadados de controle
        user_data["_access_metadata"] = {
            "requesting_user_id": current_user.id,
            "requesting_user_hierarchy": (
                requester_hierarchy.get("hierarchy_level")
                if requester_hierarchy
                else "UNKNOWN"
            ),
            "accessed_at": user_data.get("accessed_at"),
            "access_reason": user_data.get("access_reason", "Direct access"),
        }

        return user_data

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro interno do servidor: {str(e)}",
        )


@router.get(
    "/hierarchy-info",
    summary="Informa칞칫es da hierarquia do usu치rio atual",
    description="""
    Retorna informa칞칫es detalhadas sobre o n칤vel hier치rquico e contextos
    de acesso do usu치rio autenticado.

    **Informa칞칫es Retornadas:**
    - N칤vel hier치rquico (ROOT, ADMIN_EMPRESA, ADMIN_ESTABELECIMENTO, USUARIO_COMUM)
    - Lista de empresas acess칤veis
    - Lista de estabelecimentos acess칤veis
    - Roles e permiss칫es ativas
    - Estat칤sticas de usu치rios acess칤veis
    """,
    responses={
        200: {
            "description": "Informa칞칫es hier치rquicas do usu치rio",
            "content": {
                "application/json": {
                    "example": {
                        "user_id": 5,
                        "user_email": "admin@proteamcare.com",
                        "person_name": "Administrador",
                        "hierarchy_level": "ROOT",
                        "accessible_companies": [],
                        "accessible_establishments": [],
                        "accessible_users_count": 9,
                        "roles_and_permissions": {
                            "roles": [],
                            "permissions": {},
                            "establishments": [],
                        },
                    }
                }
            },
        }
    },
)
async def get_current_user_hierarchy_info(
    current_user=Depends(get_current_user), db=Depends(get_db)
) -> Dict[str, Any]:
    """Obt칠m informa칞칫es hier치rquicas do usu치rio atual"""

    # Inicializar repository hier치rquico
    hierarchical_repo = HierarchicalUserRepository(db)

    try:
        # Obter informa칞칫es hier치rquicas
        hierarchy_info = await hierarchical_repo.get_user_hierarchy_info(
            current_user.id
        )

        if not hierarchy_info:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Informa칞칫es hier치rquicas n칚o encontradas para o usu치rio",
            )

        # Obter roles e permiss칫es
        enhanced_repo = EnhancedUserRepository(db)
        roles_permissions = await enhanced_repo.get_user_roles_and_permissions(
            current_user.id
        )

        # Contar usu치rios acess칤veis
        accessible_users = await hierarchical_repo._get_accessible_user_ids(
            current_user.id
        )

        # Compilar resposta completa
        response = {
            **hierarchy_info,
            "accessible_users_count": len(accessible_users),
            "roles_and_permissions": roles_permissions,
        }

        return response

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro interno do servidor: {str(e)}",
        )


@router.get(
    "/accessible-users-summary",
    summary="Resumo de usu치rios acess칤veis",
    description="""
    Retorna um resumo estat칤stico dos usu치rios acess칤veis pelo usu치rio atual,
    agrupados por n칤vel hier치rquico e contexto.

    **M칠tricas Inclu칤das:**
    - Total de usu치rios acess칤veis
    - Distribui칞칚o por n칤vel hier치rquico
    - Distribui칞칚o por empresa/estabelecimento
    - Estat칤sticas de atividade (칰ltimos logins)
    """,
    responses={
        200: {
            "description": "Resumo estat칤stico dos usu치rios acess칤veis",
            "content": {
                "application/json": {
                    "example": {
                        "total_accessible_users": 9,
                        "by_hierarchy": {
                            "ROOT": 4,
                            "ADMIN_EMPRESA": 0,
                            "ADMIN_ESTABELECIMENTO": 0,
                            "USUARIO_COMUM": 5,
                        },
                        "by_access_level": {
                            "full": 9,
                            "company": 0,
                            "establishment": 0,
                            "self": 1,
                        },
                        "activity_summary": {
                            "active_last_30_days": 2,
                            "never_logged_in": 7,
                        },
                    }
                }
            },
        }
    },
)
async def get_accessible_users_summary(
    current_user=Depends(get_current_user), db=Depends(get_db)
) -> Dict[str, Any]:
    """Resumo estat칤stico dos usu치rios acess칤veis"""

    # Inicializar repository hier치rquico
    hierarchical_repo = HierarchicalUserRepository(db)

    try:
        # Obter todos os usu치rios acess칤veis (sem pagina칞칚o)
        users, total = await hierarchical_repo.list_accessible_users(
            requesting_user_id=current_user.id,
            skip=0,
            limit=1000,  # Limite alto para pegar todos
        )

        # Compilar estat칤sticas
        stats = {
            "total_accessible_users": total,
            "by_hierarchy": {},
            "by_access_level": {},
            "activity_summary": {"active_last_30_days": 0, "never_logged_in": 0},
        }

        # Analisar usu치rios
        for user in users:
            # Por hierarquia
            hierarchy = user.get("hierarchy_level", "UNKNOWN")
            stats["by_hierarchy"][hierarchy] = (
                stats["by_hierarchy"].get(hierarchy, 0) + 1
            )

            # Por n칤vel de acesso
            access_reason = user.get("access_reason", "")
            if "Full Access" in access_reason:
                access_level = "full"
            elif "Company" in access_reason:
                access_level = "company"
            elif "Establishment" in access_reason:
                access_level = "establishment"
            else:
                access_level = "self"

            stats["by_access_level"][access_level] = (
                stats["by_access_level"].get(access_level, 0) + 1
            )

            # Atividade
            last_login = user.get("user_last_login_at")
            if last_login is None:
                stats["activity_summary"]["never_logged_in"] += 1
            else:
                # Simplificado - assumir que teve login recente se tem data
                stats["activity_summary"]["active_last_30_days"] += 1

        return stats

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro interno do servidor: {str(e)}",
        )
