"""
Implementação simplificada do Menu Repository
Retorna menus estáticos baseados no template atual para permitir testes
"""

import time
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
import structlog

logger = structlog.get_logger()


def timing_decorator(func):
    """Decorator para medir tempo de execução de métodos"""
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        try:
            result = await func(*args, **kwargs)
            end_time = time.time()
            execution_time = end_time - start_time

            # Log apenas se for mais lento que 100ms
            if execution_time > 0.1:
                logger.warning("Método lento detectado",
                              method=func.__name__,
                              execution_time=f"{execution_time:.3f}s",
                              threshold="100ms")

            return result
        except Exception as e:
            end_time = time.time()
            execution_time = end_time - start_time
            logger.error("Erro em método com timing",
                        method=func.__name__,
                        execution_time=f"{execution_time:.3f}s",
                        error=str(e))
            raise

    return wrapper


class MenuRepository:
    """Repository simplificado para menus dinâmicos - versão de teste"""

    def __init__(self, db: AsyncSession):
        self.db = db

    @timing_decorator
    async def get_user_menus(
        self,
        user_id: int,
        context_type: str = "establishment",
        context_id: Optional[int] = None,
        include_dev_menus: bool = False
    ) -> List[Dict[str, Any]]:
        """
        Retorna menus simplificados baseados no template atual
        """

        logger.info("Buscando menus simplificados",
                   user_id=user_id,
                   context_type=context_type,
                   context_id=context_id,
                   include_dev_menus=include_dev_menus)

        # Verificar se o usuário existe
        user_info = await self.get_user_info(user_id)
        if not user_info:
            return []

        # Definir menus baseados no template atual
        is_root = user_info.get('is_system_admin', False)

        # Menus básicos para todos os usuários
        basic_menus = [
            {
                "id": 1,
                "parent_id": None,
                "name": "Dashboard",
                "slug": "dashboard",
                "url": "/admin/dashboard",
                "icon": "LayoutDashboard",
                "level": 0,
                "sort_order": 1,
                "badge_text": "Hot",
                "badge_color": "bg-red-500",
                "full_path_name": "Dashboard",
                "id_path": "1",
                "type": "menu",
                "permission_name": "dashboard.view"
            },
            {
                "id": 2,
                "parent_id": 1,
                "name": "Dashboard v1",
                "slug": "dashboard-v1",
                "url": "/admin/dashboard",
                "icon": "BarChart3",
                "level": 1,
                "sort_order": 1,
                "full_path_name": "Dashboard > Dashboard v1",
                "id_path": "1.2",
                "type": "menu",
                "permission_name": "dashboard.view"
            },
            {
                "id": 3,
                "parent_id": 1,
                "name": "Dashboard v2",
                "slug": "dashboard-v2",
                "url": "/admin/dashboard-v2",
                "icon": "PieChart",
                "level": 1,
                "sort_order": 2,
                "full_path_name": "Dashboard > Dashboard v2",
                "id_path": "1.3",
                "type": "menu",
                "permission_name": "dashboard.view"
            },
            {
                "id": 4,
                "parent_id": None,
                "name": "Componentes",
                "slug": "components",
                "url": None,
                "icon": "LayoutGrid",
                "level": 0,
                "sort_order": 2,
                "badge_text": "New",
                "badge_color": "bg-blue-500",
                "full_path_name": "Componentes",
                "id_path": "4",
                "type": "menu",
                "permission_name": "components.view"
            },
            {
                "id": 5,
                "parent_id": 4,
                "name": "Widgets",
                "slug": "widgets",
                "url": "/admin/widgets",
                "icon": "Palette",
                "level": 1,
                "sort_order": 1,
                "badge_text": "12",
                "badge_color": "bg-green-500",
                "full_path_name": "Componentes > Widgets",
                "id_path": "4.5",
                "type": "menu",
                "permission_name": "widgets.view"
            },
            {
                "id": 6,
                "parent_id": 4,
                "name": "Charts",
                "slug": "charts",
                "url": "/admin/charts",
                "icon": "BarChart3",
                "level": 1,
                "sort_order": 2,
                "full_path_name": "Componentes > Charts",
                "id_path": "4.6",
                "type": "menu",
                "permission_name": "charts.view"
            }
        ]

        # Menus adicionais para ROOT
        root_menus = [
            {
                "id": 10,
                "parent_id": None,
                "name": "Administração",
                "slug": "admin",
                "url": None,
                "icon": "Settings",
                "level": 0,
                "sort_order": 10,
                "full_path_name": "Administração",
                "id_path": "10",
                "type": "menu",
                "permission_name": "admin.view"
            },
            {
                "id": 11,
                "parent_id": 10,
                "name": "Usuários",
                "slug": "users",
                "url": "/admin/users",
                "icon": "Users",
                "level": 1,
                "sort_order": 1,
                "full_path_name": "Administração > Usuários",
                "id_path": "10.11",
                "type": "menu",
                "permission_name": "users.view"
            },
            {
                "id": 12,
                "parent_id": 10,
                "name": "Configurações",
                "slug": "settings",
                "url": "/admin/settings",
                "icon": "Settings",
                "level": 1,
                "sort_order": 2,
                "full_path_name": "Administração > Configurações",
                "id_path": "10.12",
                "type": "menu",
                "permission_name": "settings.view"
            }
        ]

        # Menus de desenvolvimento (apenas ROOT)
        dev_menus = [
            {
                "id": 20,
                "parent_id": None,
                "name": "Desenvolvimento",
                "slug": "dev",
                "url": None,
                "icon": "Code",
                "level": 0,
                "sort_order": 20,
                "badge_text": "DEV",
                "badge_color": "bg-yellow-500",
                "full_path_name": "Desenvolvimento",
                "id_path": "20",
                "type": "menu",
                "permission_name": "dev.view"
            },
            {
                "id": 21,
                "parent_id": 20,
                "name": "Debug",
                "slug": "debug",
                "url": "/admin/debug",
                "icon": "Bug",
                "level": 1,
                "sort_order": 1,
                "full_path_name": "Desenvolvimento > Debug",
                "id_path": "20.21",
                "type": "menu",
                "permission_name": "debug.view"
            }
        ]

        # Compilar lista de menus baseado nas permissões
        menus = basic_menus.copy()

        if is_root:
            menus.extend(root_menus)

            if include_dev_menus:
                menus.extend(dev_menus)

        logger.info("Menus simplificados retornados",
                   user_id=user_id,
                   total_menus=len(menus),
                   is_root=is_root,
                   include_dev=include_dev_menus)

        return menus

    async def get_user_info(self, user_id: int) -> Optional[Dict[str, Any]]:
        """
        Busca informações básicas do usuário para validação.
        """

        query = text("""
            SELECT
                u.id,
                u.email_address,
                u.is_system_admin,
                u.is_active,
                p.name,
                p.person_type
            FROM master.users u
            LEFT JOIN master.people p ON u.person_id = p.id
            WHERE u.id = :user_id
            AND u.deleted_at IS NULL
        """)

        try:
            result = await self.db.execute(query, {"user_id": user_id})
            row = result.fetchone()

            if row:
                return {
                    "id": row[0],
                    "email": row[1],
                    "is_system_admin": row[2] or False,
                    "is_active": row[3] or False,
                    "name": row[4] or f"Usuário {user_id}",
                    "person_type": row[5] or "PF"
                }

            return None

        except Exception as e:
            logger.error("Erro ao buscar informações do usuário",
                        user_id=user_id,
                        error=str(e))
            return None

    async def get_menu_tree(self, flat_menus: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Converte lista flat de menus em estrutura hierárquica
        """

        # Criar dicionário para lookup rápido
        menu_dict = {menu["id"]: {**menu, "children": []} for menu in flat_menus}

        # Construir árvore
        tree = []
        for menu in flat_menus:
            parent_id = menu.get("parent_id")
            if parent_id and parent_id in menu_dict:
                menu_dict[parent_id]["children"].append(menu_dict[menu["id"]])
            else:
                tree.append(menu_dict[menu["id"]])

        # Ordenar por sort_order
        def sort_menus(menus):
            menus.sort(key=lambda x: x.get("sort_order", 999))
            for menu in menus:
                if menu["children"]:
                    sort_menus(menu["children"])

        sort_menus(tree)
        return tree

    async def get_context_info(
        self,
        context_type: str,
        context_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """
        Retorna informações do contexto atual
        """

        return {
            "type": context_type,
            "id": context_id,
            "name": f"Mock {context_type.title()} Context",
            "description": f"Contexto simulado para {context_type}"
        }

    async def log_menu_access(
        self,
        user_id: int,
        context_type: str,
        context_id: Optional[int],
        total_menus: int,
        is_root: bool = False,
        ip_address: Optional[str] = None
    ):
        """
        Log de auditoria simplificado
        """

        logger.info("Menu access logged",
                   user_id=user_id,
                   context_type=context_type,
                   context_id=context_id,
                   total_menus=total_menus,
                   is_root=is_root,
                   ip_address=ip_address)
